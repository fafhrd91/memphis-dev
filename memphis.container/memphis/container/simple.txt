============================
Container/Contained behavior
============================

Register behavior with zcml directive.

   >>> from zope import interface, component
   >>> from zope.component.eventtesting import getEvents, clearEvents

   >>> from memphis import storage, container
   >>> from memphis.container import IContained, IContainer, ISimpleContainer


Create container
----------------

   >>> itemCont = storage.insertItem()
   >>> itemCont.applyBehavior(ISimpleContainer)

   >>> ISimpleContainer.providedBy(itemCont)
   True

   >>> IContainer.providedBy(itemCont)
   True

   >>> container = IContainer(itemCont)
   >>> container
   <memphis.container.simple.Container object at ...>

   >>> container = IContainer(itemCont)
   >>> container
   <memphis.container.simple.Container object at ...>

   >>> len(container)
   0

   >>> container['item1']
   Traceback (most recent call last):
   ...
   KeyError: 'item1'

   >>> 'item1' in container
   False


Let's add contained item

   >>> item = storage.insertItem()
   >>> IContained.providedBy(item)
   False
   
   >>> container[u'item1'] = item

   >>> container[''] = item
   Traceback (most recent call last):
   ...
   ValueError: empty names are not allowed

   >>> ev = getEvents()[-1]
   >>> ev
   <zope.lifecycleevent.ObjectAddedEvent object at ...>

   >>> ev.newParent is itemCont
   True
   
   >>> ev.newName
   u'item1'

   >>> IContained.providedBy(item)
   True

   >>> IContained(item).__parent__.oid == itemCont.oid
   True

   >>> IContained(item).__name__
   u'item1'

   >>> list(container.keys())
   [u'item1']

   >>> list(container.values())
   [<memphis.storage...>]

   >>> container['item1'].oid == item.oid
   True

   >>> container['item2']
   Traceback (most recent call last):
   ...
   KeyError: 'item2'

   >>> container.get('item1').oid == item.oid
   True

   >>> print container.get('unknown')
   None

   >>> len(container)
   1

   >>> list(container.items())
   [(u'item1', <memphis.storage...>)]
   
   >>> 'item1' in container
   True

   >>> 'item2' in container
   False

   >>> clearEvents()

   >>> container['item1'] = item
   >>> getEvents()
   []

   >>> item2 = storage.insertItem()
   >>> container[u'item1'] = item2
   Traceback (most recent call last):
   ...
   KeyError: u'item1'

   >>> container[u'item2'] = item2
   >>> list(container.keys())
   [u'item1', u'item2']

   >>> list(item.getBackReferences())[0].__source__.oid == itemCont.oid
   True

   >>> list(item2.getBackReferences())[0].__source__.oid == itemCont.oid
   True

   >>> for rel in itemCont.getReferences():
   ...     print rel.type, rel.__destination__
   simple.container <memphis.storage...>
   simple.container <memphis.storage...>


Delete item

   >>> clearEvents()
   >>> del container['item1']

   >>> ev = getEvents()[-1]
   >>> ev
   <zope.lifecycleevent.ObjectRemovedEvent ...>

   >>> ev.object.oid == item.oid
   True
   >>> ev.oldParent.oid == itemCont.oid
   True

   >>> list(item.getReferences())
   []

   >>> list(container.keys())
   [u'item2']

   >>> 'item1' in container
   False

   >>> for rel in itemCont.getReferences():
   ...     print rel.type, rel.__destination__
   simple.container <memphis.storage...>

   >>> del container['item1']
   Traceback (most recent call last):
   ...
   KeyError: 'item1'
